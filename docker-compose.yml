# Transcendence
services:
  nginx:
    build:      
      dockerfile: webserver/Dockerfile
    container_name: nginx
    env_file:
      - .env
    ports:      
      - "${PORT}:443"
    expose:
      - "8080"
    depends_on:
      - back-end      
      - game-logic      
    volumes:
      - webserver_data:/usr/share/nginx/html
      - mediafiles:/usr/share/nginx/mediafiles
      - staticfiles:/usr/share/nginx/staticfiles
    restart: always
    networks:
      - pong
    
  
  back-end:
    build:      
      dockerfile: back-end/Dockerfile
    container_name: back-end
    expose:      
      - "8000"
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./back-end/srcs:/usr/src/app      
      - mediafiles:/mediafiles
      - staticfiles:/staticfiles  
    restart: always
    networks:
      - pong
      - db
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/admin/ || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 10s
   # command: ["python", "manage.py", "runserver", "0.0.0.0:8000"] # change to gunicorn command for production ???

  front-end:
    build:      
      dockerfile: front-end/Dockerfile
    container_name: front-end
    expose:      
      - "5173"
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./front-end:/app  
    restart: always
    networks:
      - pong
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5173/ || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 10s


  game-logic:
    build:      
      dockerfile: game-logic/Dockerfile
    container_name: game-logic
    expose:      
      - "8001"
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./game-logic/back-gamelogic:/usr/src/app      
    restart: always
    networks:
      - pong
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8001/admin || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 10s
    # command: ["python", "manage.py", "runserver", "0.0.0.0:8001"] # change to daphne or gunicorn in production ???



  postgres:
    image: postgres:17.3
    container_name: postgres
    expose:
      - "5432"
    env_file:
      - .env
    restart: always    
    shm_size: 128mb
    volumes:
      - postgres_data:/var/lib/postgresql/data          
      - ./postgres:/docker-entrypoint-initdb.d
    networks:      
      - db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 10s
      retries: 3
      start_period: 10s
    command: postgres -c shared_preload_libraries=pg_stat_statements -c pg_stat_statements.track=all -c max_connections=200

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    expose:
      - "9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - back-end
      - front-end
      - game-logic
      - nginx
    networks:
      - pong
    command: 
      - '--config.file=/etc/prometheus/prometheus.yml'     
      
        
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    expose:
      - "3000"
    depends_on:
      - prometheus
    env_file:
      - .env
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_PATHS_CONFIG=/etc/grafana/grafana.ini
    volumes:      
      - ./grafana/provisioning/dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml
      - ./grafana/provisioning/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
      - ./grafana/dashboards/:/etc/grafana/dashboards/
      - ./grafana/custom_grafana.ini:/etc/grafana/grafana.ini

    restart: always
    networks:
      - pong
  
  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:latest
    container_name: nginx_exporter
    command:
    - "-nginx.scrape-uri=http://nginx:8080/status"
    expose:
    - "9113"
    networks:
    - pong
    depends_on:
    - nginx
  
  postgres_exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: postgres_exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable"
    expose:
      - "9187"
    depends_on:
      - postgres
    command: '--no-collector.stat_bgwriter'
    networks:
      - pong
      - db

networks:
  pong:
    driver: bridge
  db:
    driver: bridge

volumes:
  postgres_data:
  webserver_data: 
  mediafiles:
  staticfiles: